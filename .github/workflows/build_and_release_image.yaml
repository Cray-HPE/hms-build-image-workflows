# MIT License

# (C) Copyright [2022] Hewlett Packard Enterprise Development LP

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
name: Build and Publish Docker images
on:
  workflow_call:
    inputs:
      runs-on:
        description: The type of machine to run the job on.
        type: string
        required: false
        default: ubuntu-latest
      
      docker-registry:
        description: Registry to publish container images to
        type: string
        default: artifactory.algol60.net
        required: false
      image-name:
        description: Container image name. For example, cray-firmware-action
        type: string
        required: true
      docker-build-context:
        description: Build's context is the set of files located in the specified PATH.
        type: string
        default: "."
        required: false
      docker-build-file:
        description: Path to the Dockerfile. If set to the empty string it will default to {docker-build-context}/Dockerfile.
        type: string
        default: ""
        required: false

      enable-latest-tag:
        description: Enable the latest tag for stable builds. Choose from true or false
        type: string
        default: false
        required: false

      snyk-severity:
        description: |
          Only report vulnerabilities of provided level or higher.
          Choose from: low, medium, high, or critical
        type: string
        default: high
        required: false

      # TODO It doesn't look like continue-on-error can be templated
      # snyk-continue-on-error:
      #   description: Control where snyk should continue on if an error/vulnerability is found. Choose from true or false
      #   type: string
      #   default: false
      #   required: false
      
      trivy-enable:
        description: Enable or disable the Trivy Vulnerability scanner. Choose from true or false
        type: string
        default: false
        required: false
      trivy-exit-code:
        description: Exit code when vulnerabilities were found
        type: string
        default: 0
        required: false
      trivy-severity:
        description: Severities of vulnerabilities to be displayed
        type: string
        default: CRITICAL,HIGH
        required: false

      enable-pr-comment:
        description: Control whether the update-pr-with-artifacts job runs on PR builds. Choose from true or false
        type: string
        default: true
        required: false
      pr-comment-template:
        description: PR comment template
        type: string
        required: false
        default: |
          <!-- This file is templated with https://pkg.go.dev/html/template -->
          ðŸ‘‹  Hey! Here is the image we built for you ([Artifactory Link](https://artifactory.algol60.net/ui/repos/tree/General/csm-docker%2F{{ .stableString }}%2F{{ .imageName }}%2F{{ .imageTag }})):

          ```bash
          {{ .image }}
          ```

          Use podman or docker to pull it down and inspect locally:

          ```bash
          podman pull {{ .image }}
          ```

          Or, use this script to pull the image from the build server to a dev system:

          <details>
          <summary>Dev System Pull Script</summary>
          <br />

          > **Note** the following script only applies to systems running CSM 1.2 or later.

          ```bash
          #!/usr/bin/env bash

          IMAGE={{ .image }}
          
          podman run --rm --network host  \
              quay.io/skopeo/stable copy \
              --src-tls-verify=false \
              --dest-tls-verify=false \
              --dest-username "$(kubectl -n nexus get secret nexus-admin-credential -o json | jq -r '.data.username | @base64d')" \
              --dest-password "$(kubectl -n nexus get secret nexus-admin-credential -o json | jq -r '.data.password | @base64d')" \
              docker://$IMAGE \
              docker://registry.local/$IMAGE
          ```
          </details>

          <details>
          <summary>Snyk Report</summary>
          <br />

          _Coming soon_

          </details>

          <details>
          <summary>Software Bill of Materials</summary>
          <br />

          ```bash
          cosign download sbom {{ .image }} > container_image.spdx
          ```

          If you don't have cosign, then you can get it [here](https://github.com/sigstore/cosign#installation).
          </details>

          *Note*: this SHA is the merge of {{ .PRHeadSha }} and the PR base branch. Good luck and make rocket go now! ðŸŒ® ðŸš€

      job-summary-template:
        description: Job summary template
        type: string
        default: |
          <!-- This file is templated with https://pkg.go.dev/html/template -->
          ðŸ‘‹  Hey! Here is the image we built for you ([Artifactory Link](https://artifactory.algol60.net/ui/repos/tree/General/csm-docker%2F{{ .stableString }}%2F{{ .imageName }}%2F{{ .imageTag }})):

          ```bash
          {{ .image }}
          ```

          Use podman or docker to pull it down and inspect locally:

          ```bash
          podman pull {{ .image }}
          ```

          {{ if .isPullRequest }}
          *Note*: this SHA is the merge of {{ .PRHeadSha }} and the PR base branch. Good luck and make rocket go now! ðŸŒ® ðŸš€
          {{ end }}

          {{ if ne (len .dockerMeta.tags ) 0 }}
          The docker image is also available under the following images tags:
          {{- range $imageTag := .dockerMeta.tags  }}
          * `{{ $imageTag }}` | 
          {{- end }}
          {{ end }}

          ## Dev System Pull Script
          Or, use this script to pull the image from the build server to a dev system:

          > **Note** the following script only applies to systems running CSM 1.2 or later.

          ```bash
          #!/usr/bin/env bash

          IMAGES=(
            {{- range $imageTag := .dockerMeta.tags  }}
            {{ $imageTag }}
            {{- end }}
          )

          for IMAGE in ${IMAGES[@]}; do 
            echo "Syncing $IMAGE"
            WORD="word"
            podman run --rm --network host  \
                quay.io/skopeo/stable copy \
                --src-tls-verify=false \
                --dest-tls-verify=false \
                --dest-username "$(kubectl -n nexus get secret nexus-admin-credential -o json | jq -r '.data.username | @base64d')" \
                --dest-pass$WORD "$(kubectl -n nexus get secret nexus-admin-credential -o json | jq -r '.data.password | @base64d')" \
                docker://$IMAGE \
                docker://registry.local/$IMAGE
          done
          ```

          ## Snyk Report</summary>

          _Coming soon_

          ## Software Bill of Materials

          ```bash
          cosign download sbom {{ .image }} > container_image.spdx
          ```

          If you don't have cosign, then you can get it [here](https://github.com/sigstore/cosign#installation).
    
    secrets:
      ARTIFACTORY_ALGOL60_USERNAME:
        description: Artifactory username used for docker pushes
        required: true
      ARTIFACTORY_ALGOL60_TOKEN:
        description: Artifactory token for the given user
        required: true

      SNYK_TOKEN:
        description: Snyk authorization token
        required: true

      COSIGN_GCP_PROJECT_ID:
        description: Project ID in GCP for cosign
        required: true
      COSIGN_GCP_SA_KEY:
        description: Service account key in GCP for cosign
        required: true
      COSIGN_KEY:
        description: cosign key
        required: true

jobs:
  build_and_release:
    name: Build and Publish Docker images
    runs-on: ${{ inputs.runs-on }}
    outputs:
      stable-string: ${{ steps.image-meta.outputs.stable-string }}
      image: ${{ steps.image-meta.outputs.image }}
      image-tag: ${{ steps.image-meta.outputs.tag }}
      image-repository: ${{ steps.image-meta.outputs.repository }}
      all-image-tags: ${{ steps.meta.outputs.tags }}
    permissions: # Required for google-github-actions/auth
      contents: 'read'
      id-token: 'write'
    steps:
    #
    # Setup build environment
    #
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to algol60 Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ inputs.docker-registry }}
        username: ${{ secrets.ARTIFACTORY_ALGOL60_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_ALGOL60_TOKEN }}

    #
    # Build, scan, push, and sign container image
    #
    - name: Generate build metadata
      uses: Cray-HPE/hms-build-metadata-action/generate-build-metadata@CASMHMS-5597
      id: build-metadata
      with:
        stable-strategy: tag

    # TODO if this is a stable build from a git tag, lets check that git tag matches.

    - name: Determine container image name and tag
      id: image-meta
      run: |
        # Retrieve the version from the .version file, and append the build metadata to it.
        STABLE_STRING=${{ fromJSON(steps.build-metadata.outputs.is-stable) && 'stable' || 'unstable' }}
        REPOSITORY=${{ inputs.docker-registry }}/csm-docker/$STABLE_STRING/${{ inputs.image-name }}
        DOT_VERSION=$(cat .version)
        TAG=$DOT_VERSION${{ steps.build-metadata.outputs.docker }}
        IMAGE=$REPOSITORY:$TAG

        if [[ "$STABLE_STRING" == "stable" ]]; then
          SEMVER=$DOT_VERSION
        else
          SEMVER=$TAG
        fi

        echo "Stable string: $STABLE_STRING"
        echo "Container image repository: $REPOSITORY"
        echo "Container image tag: $TAG"
        echo "Container image: $IMAGE"
        echo ".version: $DOT_VERSION"
        echo "SEMVER: $SEMVER"

        echo "stable-string=$STABLE_STRING" >> $GITHUB_OUTPUT
        echo "repository=$REPOSITORY" >> $GITHUB_OUTPUT
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "image=$IMAGE" >> $GITHUB_OUTPUT
        echo "dot-version=$DOT_VERSION" >> $GITHUB_OUTPUT
        echo "semver=$SEMVER" >> $GITHUB_OUTPUT

    - name: Docker metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ steps.image-meta.outputs.repository }}
        labels: |
          org.opencontainers.image.vendor=Hewlett Packard Enterprise Development LP
        flavor: |
          latest=${{ inputs.enable-latest-tag }}
        tags: |
          type=schedule
          type=raw,value=${{ steps.image-meta.outputs.tag }}
          type=semver,pattern={{version}},value=${{ steps.image-meta.outputs.semver }}
        # Note, the {{major}}, {{major}}.{{minor}} patterns only work on git tags

    - name: Build image
      uses: docker/build-push-action@v3
      id: docker-build
      with:
        context: ${{ inputs.docker-build-context }}
        file: ${{ inputs.docker-build-file }}
        load: true
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Current images
      shell: bash
      run: docker images

    - name: Run Snyk to check Docker images for vulnerabilities
      uses: snyk/actions/docker@master
      # TODO Revisit out how we want to handle failing synk scans. I like the idea of snyk scan failing a unstable build as that will force us to deal with it.
      # TODO It doesn't look like continue-on-error can be templated
      # continue-on-error: ${{ !fromJSON(steps.build-metadata.outputs.is-stable) }}  # If stable build force build failure, for unstable push on.
      # continue-on-error: ${{ fromJSON(inputs.snyk-continue-on-error) }}
      # continue-on-error: ${{ inputs.snyk-continue-on-error == 'true' }}
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ${{ steps.image-meta.outputs.image }}
        args: --severity-threshold=${{ inputs.snyk-severity }} --skip-unresolved=true

    # TODO need a policy on how to use Trivy results
    - name: Run Trivy vulnerability scanner 
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: image
        exit-code: ${{ inputs.trivy-exit-code }}
        image-ref: ${{ steps.image-meta.outputs.image }}
        severity: ${{ inputs.trivy-severity }}
        hide-progress: false
      if: ${{ fromJSON(inputs.trivy-enable) }}

    - name: Push image(s)
      shell: bash
      env:
        IMAGE_TAGS: ${{ steps.meta.outputs.tags }}
      run: |
        set -eu
        for IMAGE_TAG in $IMAGE_TAGS; do
          echo "Pushing image: $IMAGE_TAG"
          docker push "$IMAGE_TAG"
        done

    - name: Sign an image in artifactory
      uses: Cray-HPE/.github/actions/csm-sign-image@CASMHMS-5597
      with:
        cosign-gcp-project-id: ${{ secrets.COSIGN_GCP_PROJECT_ID }}
        cosign-gcp-sa-key: ${{ secrets.COSIGN_GCP_SA_KEY }}
        cosign-key: ${{ secrets.COSIGN_KEY }}
        registry: ${{ inputs.docker-registry }}
        registry-username: ${{ secrets.ARTIFACTORY_ALGOL60_USERNAME }}
        registry-password: ${{ secrets.ARTIFACTORY_ALGOL60_TOKEN }}
        github-sha: ${{ github.sha }}
        image: ${{ steps.image-meta.outputs.image }}

    - name: Generate, Attach, and Sign container image SBOM
      uses: Cray-HPE/.github/actions/csm-generate-attach-sign-sbom@CASMHMS-5597
      id: sbom
      with:
        cosign-gcp-project-id: ${{ secrets.COSIGN_GCP_PROJECT_ID }}
        cosign-gcp-sa-key: ${{ secrets.COSIGN_GCP_SA_KEY }}
        cosign-key: ${{ secrets.COSIGN_KEY }}
        registry: ${{ inputs.docker-registry }}
        registry-username: ${{ secrets.ARTIFACTORY_ALGOL60_USERNAME }}
        registry-password: ${{ secrets.ARTIFACTORY_ALGOL60_TOKEN }}
        github-sha: ${{ github.sha }}
        image: ${{ steps.image-meta.outputs.image }}

    - name: Artifact download links
      env:
        IMAGE_TAGS: ${{ steps.meta.outputs.tags }}
        IMAGE: ${{ steps.image-meta.outputs.image }}
      run: |
        echo "Container images"
        for IMAGE_TAG in $IMAGE_TAGS; do
          echo "  Pull command: docker pull $IMAGE_TAG"
        done
        echo "Download SBOM: cosign download sbom $IMAGE > container_image.spdx"

    - name: Job summary prep
      shell: bash
      env:
        JOB_SUMMARY_TEMPLATE: ${{ inputs.job-summary-template }}
        DOCKER_META_JSON: ${{ steps.meta.outputs.json }}
      run: |
        mkdir -p ./temp

        # Write out the job summary template to a file
        printenv JOB_SUMMARY_TEMPLATE > ./temp/job_summary_template.md

        # Convert the output of the docker meta action to yaml to make it work easier with the render-template action.
        printenv DOCKER_META_JSON | yq '{"dockerMeta": .}' -P > ./temp/job_summary_vars.yaml


    - name: Render Job summary
      id: template
      uses: chuhlomin/render-template@v1.6
      with:
        template: ./temp/job_summary_template.md
        # Note the vars below cannot have dashes '-' in them
        vars: |
            image: ${{ steps.image-meta.outputs.image }}
            imageTag: ${{ steps.image-meta.outputs.tag }}
            imageRepository: ${{ steps.image-meta.outputs.repository }} 
            imageName: ${{ inputs.image-name }}
            stableString: ${{ steps.image-meta.outputs.stable-string  }}

            PRHeadSha: ${{ github.event.pull_request.head.sha }}
            isPullRequest: ${{ github.event_name == 'pull_request' }}
        vars_path: ./temp/job_summary_vars.yaml
        result_path: ./temp/job_summary.md

    - name: Set job summary
      shell: bash
      run: |
        cat ./temp/job_summary.md >> $GITHUB_STEP_SUMMARY

  update-pr-with-artifacts:
    name: Update PR comment with artifacts
    runs-on: ${{ inputs.runs-on }}
    if: ${{ fromJSON(inputs.enable-pr-comment) && github.event_name == 'pull_request' }}
    needs:
      - build_and_release
    steps:
      - name: PR comment prep
        shell: bash
        env:
          PR_COMMENT_TEMPLATE: ${{ inputs.pr-comment-template }}
        run: |
          # Write out the job summary template to a file
          printenv PR_COMMENT_TEMPLATE > ./pr_comment_template.md
      
      - name: Find Comment
        uses: peter-evans/find-comment@v2
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: "${{ needs.build_and_release.outputs.image-repository }}:"

      - name: Render template
        id: template
        uses: chuhlomin/render-template@v1.6
        with:
          template: ./pr_comment_template.md
          # Note the vars below cannot have dashes '-' in them
          vars: |
            image: ${{ needs.build_and_release.outputs.image }}
            imageTag: ${{ needs.build_and_release.outputs.image-tag }}
            imageRepository: ${{ needs.build_and_release.outputs.image-repository }} 
            imageName: ${{ inputs.image-name }}
            stableString: ${{ needs.build_and_release.outputs.stable-string }}
            PRHeadSha: ${{ github.event.pull_request.head.sha }}
      - name: Create comment
        if: steps.fc.outputs.comment-id == ''
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.template.outputs.result }}
          reactions: rocket

      - name: Update comment
        if: steps.fc.outputs.comment-id != ''
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          body: ${{ steps.template.outputs.result }}
          edit-mode: replace

#todos
#1 what do we do if snyk fails? an artifact has already been published?
#  - Break apart the docker/build-push-actions. 1. Build the image, 2. Scan the image, 3. Push the image
#2 need to parameterize repo and semver
#3 need to clarify the build tags we want
#  - Stable builds have 1.1.1, 1.1, 1
#  - Unstable builds have 1.1.1-12345.123
#4 need to clarify how use gets notified if synk encounters an error; does it just keep on going? or does it stop?
#  - Ryan S: My opinion is that it should cause the build to fail and not push any images.
#5 STRETCH objective : integrate SBOM
#6 where are we sending the snyk/trivy reports? Thinking about sending it to its OWN file in artifactory named: sha-digest.snky ; need to look at how the     - name: Publish Helm charts uploads and modify?